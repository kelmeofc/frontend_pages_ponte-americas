---
description: SWR data fetching patterns and best practices for React applications
alwaysApply: false
---
# SWR Data Fetching Rules

## üìã Vis√£o Geral

SWR (Stale-While-Revalidate) √© uma biblioteca de data fetching para React que implementa estrat√©gias de cache inteligente, revalida√ß√£o autom√°tica e sincroniza√ß√£o de dados. Este guia define padr√µes e melhores pr√°ticas para uso do SWR no projeto.

## üéØ Princ√≠pios Fundamentais

### 1. **Stale-While-Revalidate**
- Retorna dados em cache (stale) imediatamente
- Revalida em background para manter dados atualizados
- Melhora UX com carregamento instant√¢neo

### 2. **Deduplica√ß√£o Autom√°tica**
- M√∫ltiplas requisi√ß√µes com a mesma chave s√£o deduplicadas
- Evita requisi√ß√µes desnecess√°rias
- Reduz carga no servidor

### 3. **Revalida√ß√£o Inteligente**
- Revalida√ß√£o autom√°tica em foco da janela
- Revalida√ß√£o em reconex√£o de rede
- Revalida√ß√£o por intervalo de tempo

## üèóÔ∏è Padr√µes de Implementa√ß√£o

### Estrutura B√°sica

```typescript
import useSWR from 'swr';

// Fetcher function
const fetcher = (url: string) => fetch(url).then(res => res.json());

// Hook b√°sico
const { data, error, isLoading, mutate } = useSWR(key, fetcher, options);
```

### Configura√ß√£o Global

```typescript
// swr-config.ts
import { SWRConfiguration } from 'swr';

export const swrConfig: SWRConfiguration = {
  revalidateOnFocus: false,
  revalidateOnReconnect: true,
  dedupingInterval: 2000,
  errorRetryCount: 3,
  errorRetryInterval: 5000,
  refreshInterval: 0,
  shouldRetryOnError: true,
};
```

## üîß Padr√µes de Uso no Projeto

### 1. **Server Actions com SWR**

```typescript
// ‚úÖ PADR√ÉO RECOMENDADO: Server Actions + SWR
const { data: userInfo, error, isLoading, mutate } = useSWR(
  'userInfo', 
  () => GetUserProfileAction(), 
  {
    revalidateOnFocus: false,
    revalidateOnReconnect: false,
    dedupingInterval: CACHE_TTL_MS,
    onSuccess: (res) => {
      if (res && typeof res === 'object' && 'user' in res) {
        useUserStore.getState().setUserInfo((res as any).user);
      }
    }
  }
);
```

### 2. **Cache com TTL Personalizado**

```typescript
const CACHE_TTL_MS = 180 * 1000; // 3 minutos

const { data, error, isLoading, mutate } = useSWR(
  'organizationMembers',
  () => SelectOrganizationMembersAction(),
  {
    initialData: orgCacheValid ? profileCacheStore.getOrganizationMembersCacheItem().data : undefined,
    revalidateOnMount: !orgCacheValid,
    revalidateOnFocus: false,
    revalidateOnReconnect: false,
    dedupingInterval: CACHE_TTL_MS,
    onSuccess: (res) => {
      if (Array.isArray(res)) {
        useProfileCacheStore.getState().setOrganizationMembersCache(res, false);
      }
    }
  }
);
```

## üìä Estrat√©gias de Cache

### 1. **Cache por Chave**

```typescript
// Chaves estruturadas para melhor organiza√ß√£o
const SWR_KEYS = {
  USER_INFO: 'userInfo',
  ORGANIZATION_MEMBERS: 'organizationMembers',
  REPORT_COUNT: 'reportCount',
  INVITATIONS: 'invitations',
} as const;

// Uso das chaves
const { data } = useSWR(SWR_KEYS.USER_INFO, fetcher);
```

### 2. **Cache Condicional**

```typescript
// Cache condicional baseado em estado
const shouldFetch = user?.isAuthenticated && !isLoading;

const { data } = useSWR(
  shouldFetch ? 'userProfile' : null,
  () => GetUserProfileAction()
);
```

### 3. **Cache com Valida√ß√£o**

```typescript
// Verifica validade do cache antes de usar
const isCacheValid = profileCacheStore.isCacheValidByKey('userInfo');

const { data } = useSWR(
  'userInfo',
  () => GetUserProfileAction(),
  {
    initialData: isCacheValid ? profileCacheStore.getUserInfoCacheItem().data : undefined,
    revalidateOnMount: !isCacheValid,
  }
);
```

## üîÑ Revalida√ß√£o e Muta√ß√£o

### 1. **Revalida√ß√£o Manual**

```typescript
const { data, mutate } = useSWR('userInfo', fetcher);

// Revalida√ß√£o manual
const handleRefresh = () => {
  mutate(); // Revalida dados
};

// Revalida√ß√£o otimista
const handleUpdate = async (newData) => {
  mutate(newData, false); // Atualiza UI imediatamente
  try {
    await updateUser(newData);
    mutate(); // Revalida com dados do servidor
  } catch (error) {
    mutate(); // Reverte em caso de erro
  }
};
```

### 2. **Revalida√ß√£o Global**

```typescript
import { mutate } from 'swr';

// Revalida todas as chaves
mutate();

// Revalida chave espec√≠fica
mutate('userInfo');

// Revalida m√∫ltiplas chaves
mutate(['userInfo', 'organizationMembers']);
```

## ‚ö° Performance e Otimiza√ß√£o

### 1. **Deduplica√ß√£o Inteligente**

```typescript
// Configura√ß√£o para evitar requisi√ß√µes desnecess√°rias
const swrOptions = {
  dedupingInterval: 2000, // 2 segundos
  revalidateOnFocus: false,
  revalidateOnReconnect: false,
};
```

### 2. **Loading States**

```typescript
const { data, error, isLoading, isValidating } = useSWR(key, fetcher);

// Estados de loading diferenciados
if (isLoading) return <InitialLoading />;
if (isValidating) return <Revalidating />;
if (error) return <ErrorState />;
if (!data) return <NoData />;

return <Content data={data} />;
```

### 3. **Error Handling**

```typescript
const { data, error, mutate } = useSWR(key, fetcher, {
  onError: (error) => {
    console.error('SWR Error:', error);
    toast.error('Erro ao carregar dados');
  },
  onErrorRetry: (error, key, config, revalidate, { retryCount }) => {
    // Retry personalizado
    if (error.status === 404) return;
    if (retryCount >= 3) return;
    setTimeout(() => revalidate({ retryCount }), 5000);
  }
});
```

## üé® Padr√µes de UI

### 1. **Loading States**

```typescript
const UserProfile = () => {
  const { data, error, isLoading, isValidating } = useSWR('userProfile', fetcher);

  if (isLoading) {
    return <ProfileSkeleton />;
  }

  if (error) {
    return <ErrorMessage error={error} onRetry={() => mutate()} />;
  }

  return (
    <div>
      {isValidating && <RevalidationIndicator />}
      <ProfileContent data={data} />
    </div>
  );
};
```

### 2. **Optimistic Updates**

```typescript
const UpdateProfile = () => {
  const { data, mutate } = useSWR('userProfile', fetcher);

  const handleUpdate = async (newData) => {
    // Update otimista
    mutate({ ...data, ...newData }, false);
    
    try {
      await updateProfile(newData);
      mutate(); // Revalida com dados do servidor
    } catch (error) {
      mutate(); // Reverte em caso de erro
      toast.error('Erro ao atualizar perfil');
    }
  };

  return <ProfileForm data={data} onSubmit={handleUpdate} />;
};
```

## üîê Autentica√ß√£o e Autoriza√ß√£o

### 1. **SWR com Auth**

```typescript
const useAuthenticatedSWR = (key: string, fetcher: any, options?: any) => {
  const { user, isAuthenticated } = useAuth();
  
  return useSWR(
    isAuthenticated ? key : null,
    fetcher,
    {
      ...options,
      onError: (error) => {
        if (error.status === 401) {
          // Redireciona para login
          router.push('/auth/sign-in');
        }
      }
    }
  );
};
```

### 2. **Token Refresh**

```typescript
const { data } = useSWR(
  'userProfile',
  fetcher,
  {
    onError: (error) => {
      if (error.status === 401) {
        // Tenta refresh do token
        refreshToken().then(() => {
          mutate(); // Revalida ap√≥s refresh
        });
      }
    }
  }
);
```

## üì± Mobile e Offline

### 1. **Offline Support**

```typescript
const { data, error } = useSWR(
  'userProfile',
  fetcher,
  {
    revalidateOnReconnect: true,
    revalidateOnFocus: true,
    refreshWhenOffline: false,
    refreshWhenHidden: false,
  }
);
```

### 2. **Network Status**

```typescript
const useNetworkAwareSWR = (key: string, fetcher: any) => {
  const [isOnline, setIsOnline] = useState(true);
  
  useEffect(() => {
    const handleOnline = () => setIsOnline(true);
    const handleOffline = () => setIsOnline(false);
    
    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);
    
    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);

  return useSWR(
    isOnline ? key : null,
    fetcher,
    {
      revalidateOnReconnect: true,
    }
  );
};
```

## üß™ Testing

### 1. **Mock SWR**

```typescript
// __mocks__/swr.ts
export default function useSWR(key: string, fetcher: any, options?: any) {
  return {
    data: mockData[key],
    error: null,
    isLoading: false,
    isValidating: false,
    mutate: jest.fn(),
  };
}
```

### 2. **Test Components**

```typescript
import { render, screen } from '@testing-library/react';
import { SWRConfig } from 'swr';

const TestWrapper = ({ children }) => (
  <SWRConfig value={{ fetcher: () => Promise.resolve(mockData) }}>
    {children}
  </SWRConfig>
);

test('renders user profile', () => {
  render(
    <TestWrapper>
      <UserProfile />
    </TestWrapper>
  );
  
  expect(screen.getByText('User Name')).toBeInTheDocument();
});
```

## üö® Anti-Patterns

### ‚ùå **Evitar**

```typescript
// ‚ùå M√∫ltiplas requisi√ß√µes desnecess√°rias
const { data: user } = useSWR('user', fetcher);
const { data: profile } = useSWR('profile', fetcher);
const { data: settings } = useSWR('settings', fetcher);

// ‚ùå SWR sem configura√ß√£o adequada
const { data } = useSWR('data', fetcher); // Sem options

// ‚ùå Misturar SWR com useState para dados do servidor
const [data, setData] = useState();
const { data: swrData } = useSWR('data', fetcher);
```

### ‚úÖ **Fazer**

```typescript
// ‚úÖ Configura√ß√£o adequada
const { data } = useSWR('data', fetcher, {
  revalidateOnFocus: false,
  dedupingInterval: 2000,
  onError: handleError,
});

// ‚úÖ Cache inteligente
const { data } = useSWR(
  shouldFetch ? 'data' : null,
  fetcher,
  { initialData: cachedData }
);

// ‚úÖ Muta√ß√£o otimista
const handleUpdate = async (newData) => {
  mutate(newData, false);
  try {
    await updateData(newData);
    mutate();
  } catch (error) {
    mutate();
  }
};
```

## üìö Refer√™ncias e Recursos

- [SWR Documentation](https://swr.vercel.app/)
- [SWR Best Practices](https://swr.vercel.app/docs/advanced/performance)
- [SWR with Next.js](https://swr.vercel.app/docs/getting-started)
- [SWR Configuration](https://swr.vercel.app/docs/global-configuration)

## üéØ Checklist de Implementa√ß√£o

- [ ] Configurar SWR globalmente com op√ß√µes adequadas
- [ ] Implementar chaves estruturadas para cache
- [ ] Adicionar error handling e retry logic
- [ ] Implementar loading states apropriados
- [ ] Adicionar revalida√ß√£o manual quando necess√°rio
- [ ] Configurar cache TTL adequado
- [ ] Implementar optimistic updates
- [ ] Adicionar testes para componentes com SWR
- [ ] Documentar padr√µes espec√≠ficos do projeto

Este guia garante uso consistente e eficiente do SWR em todo o projeto, melhorando performance e experi√™ncia do usu√°rio.