---
description: Rules for centralized type mapping and redundancy elimination
alwaysApply: false
---
# Type Mapping System - Pandami

## üéØ Identified Problems

### 1. Duplicated Types
- `ServiceItem` defined in `@types/IFormStep.ts` and `lib/my-site-form-mapping.ts`
- `FormField` with similar structures in multiple files
- Redundant interfaces for validation

### 2. Lack of Centralization
- Types scattered across different files
- Inconsistent imports
- Difficult maintenance

## ‚úÖ Solution: Centralized System

### 1. Centralized Type Structure

```typescript
// @types/index.ts - Single entry point
export * from './IFormStep'
export * from './IUser'
export * from './IAuthentication'
export * from './IOrganization'
export * from './IPayment'
export * from './IReport'
export * from './IHairstyle'
export * from './ICollection'
export * from './IFile'
export * from './IPagination'
export * from './IAdminCheck'
export * from './IAuthorization'
export * from './IAxiosResponseError'
export * from './IHookFormReturn'
```

### 2. Mapping Rules

#### **NEVER Duplicate Types**
```typescript
// ‚ùå WRONG: Duplicated types
// @types/IFormStep.ts
export interface ServiceItem {
  id: string
  name: string
  // ...
}

// lib/my-site-form-mapping.ts
export interface ServiceItem {  // ‚ùå DUPLICATED!
  id: string
  name: string
  // ...
}

// ‚úÖ CORRECT: Import and reuse
// lib/my-site-form-mapping.ts
import { ServiceItem } from '@/@types/IFormStep'
// Reuse, don't redefine
```

#### **ALWAYS Use Centralized Imports**
```typescript
// ‚ùå WRONG: Direct imports
import { ServiceItem } from '@/@types/IFormStep'
import { User } from '@/@types/IUser'
import { Payment } from '@/@types/IPayment'

// ‚úÖ CORRECT: Centralized import
import { ServiceItem, User, Payment } from '@/@types'
```

### 3. Estrutura de Arquivos de Tipos

```
src/@types/
‚îú‚îÄ‚îÄ index.ts                    # Re-exports centralizados
‚îú‚îÄ‚îÄ IFormStep.ts               # Tipos de formul√°rios
‚îú‚îÄ‚îÄ IUser.ts                   # Tipos de usu√°rio
‚îú‚îÄ‚îÄ IAuthentication.ts        # Tipos de autentica√ß√£o
‚îú‚îÄ‚îÄ IOrganization.ts          # Tipos de organiza√ß√£o
‚îú‚îÄ‚îÄ IPayment.ts               # Tipos de pagamento
‚îú‚îÄ‚îÄ IReport.ts                # Tipos de relat√≥rios
‚îú‚îÄ‚îÄ IHairstyle.ts             # Tipos de penteados
‚îú‚îÄ‚îÄ ICollection.ts            # Tipos de cole√ß√µes
‚îú‚îÄ‚îÄ IFile.ts                  # Tipos de arquivos
‚îú‚îÄ‚îÄ IPagination.ts            # Tipos de pagina√ß√£o
‚îú‚îÄ‚îÄ IAdminCheck.ts            # Tipos de verifica√ß√£o admin
‚îú‚îÄ‚îÄ IAuthorization.ts         # Tipos de autoriza√ß√£o
‚îú‚îÄ‚îÄ IAxiosResponseError.ts    # Tipos de erro axios
‚îî‚îÄ‚îÄ IHookFormReturn.ts        # Tipos de retorno hook form
```

### 4. Regras de Nomenclatura

#### **Interfaces**
- **Padr√£o**: `I[Nome]` (ex: `IUser`, `IServiceItem`)
- **Props**: `[Componente]Props` (ex: `ButtonProps`, `FormFieldProps`)
- **Config**: `[Nome]Config` (ex: `StepConfig`, `FormConfig`)

#### **Types**
- **Padr√£o**: `[Nome]Type` (ex: `UserType`, `ServiceType`)
- **Union**: `[Nome]Status` (ex: `UserStatus`, `PaymentStatus`)
- **Enum**: `[Nome]Enum` (ex: `UserRoleEnum`, `PaymentMethodEnum`)

### 5. Valida√ß√£o de Tipos

#### **SEMPRE Valide Tipos**
```typescript
// ‚úÖ CORRETO: Valida√ß√£o com Zod
import { z } from 'zod'

export const ServiceItemSchema = z.object({
  id: z.string().uuid(),
  name: z.string().min(1).max(100),
  description: z.string().max(500),
  price: z.string().regex(/^\d+\.?\d*$/),
  duration: z.string().regex(/^\d+$/),
  enabled: z.boolean()
})

export type ServiceItem = z.infer<typeof ServiceItemSchema>
```

#### **NUNCA Use `any`**
```typescript
// ‚ùå ERRADO: Uso de any
interface FormProps {
  data: any  // ‚ùå Muito gen√©rico
  errors: any
}

// ‚úÖ CORRETO: Tipos espec√≠ficos
interface FormProps<T> {
  data: T
  errors: FieldErrors<T>
}
```

### 6. Documenta√ß√£o de Tipos

#### **SEMPRE Documente Interfaces**
```typescript
/**
 * Representa um item de servi√ßo no sistema
 * @interface ServiceItem
 * @property {string} id - Identificador √∫nico do servi√ßo
 * @property {string} name - Nome do servi√ßo
 * @property {string} description - Descri√ß√£o detalhada
 * @property {string} price - Pre√ßo em formato string
 * @property {string} duration - Dura√ß√£o em minutos
 * @property {boolean} enabled - Se o servi√ßo est√° ativo
 */
export interface ServiceItem {
  id: string
  name: string
  description: string
  price: string
  duration: string
  enabled: boolean
}
```

### 7. Migra√ß√£o de Tipos Existentes

#### **Passo 1: Identificar Duplica√ß√µes**
```bash
# Buscar tipos duplicados
grep -r "interface ServiceItem" src/
grep -r "interface FormField" src/
grep -r "interface User" src/
```

#### **Passo 2: Consolidar em @types/**
```typescript
// @types/IFormStep.ts - Vers√£o consolidada
export interface ServiceItem {
  id: string
  name: string
  description: string
  price: string
  priceRange?: {
    min: string
    max: string
  }
  duration: string
  enabled: boolean
}

export interface FormField {
  name: string
  label: string
  type: 'text' | 'email' | 'tel' | 'textarea' | 'select' | 'switch' | 'checkbox'
  placeholder?: string
  required?: boolean
  rows?: number
  accept?: string
  options?: Array<{ value: string; label: string }>
  validation?: {
    minLength?: number
    maxLength?: number
    pattern?: string
    message?: string
  }
}
```

#### **Passo 3: Atualizar Imports**
```typescript
// lib/my-site-form-mapping.ts
import { ServiceItem, FormField } from '@/@types/IFormStep'

// Remover defini√ß√µes duplicadas
// export interface ServiceItem { ... } ‚ùå REMOVER
// export interface FormField { ... } ‚ùå REMOVER
```

### 8. Regras de Import

#### **SEMPRE Use Path Mapping**
```typescript
// tsconfig.json
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"],
      "@/types/*": ["./src/@types/*"]
    }
  }
}

// ‚úÖ CORRETO: Import com path mapping
import { ServiceItem } from '@/@types/IFormStep'
import { User } from '@/@types/IUser'
```

#### **NUNCA Use Imports Relativos para Tipos**
```typescript
// ‚ùå ERRADO: Import relativo
import { ServiceItem } from '../../../@types/IFormStep'

// ‚úÖ CORRETO: Import absoluto
import { ServiceItem } from '@/@types/IFormStep'
```

### 9. Verifica√ß√£o de Conformidade

#### **Script de Verifica√ß√£o**
```bash
# Verificar tipos duplicados
npx tsc --noEmit --strict

# Verificar imports n√£o utilizados
npx eslint --ext .ts,.tsx src/ --fix
```

#### **Pre-commit Hook**
```json
{
  "husky": {
    "hooks": {
      "pre-commit": "pnpm run type-check && pnpm dlx cypress run --component"
    }
  }
}
```

## üöÄ Benef√≠cios

### ‚úÖ Manutenibilidade
- Tipos centralizados em um local
- Mudan√ßas refletem em todo o projeto
- Menos duplica√ß√£o de c√≥digo

### ‚úÖ Type Safety
- Tipos fortemente tipados
- Autocomplete melhorado
- Menos erros em tempo de execu√ß√£o

### ‚úÖ Performance
- Imports otimizados
- Tree shaking mais efetivo
- Bundle size menor

### ‚úÖ Escalabilidade
- F√°cil adicionar novos tipos
- Estrutura consistente
- Onboarding mais r√°pido